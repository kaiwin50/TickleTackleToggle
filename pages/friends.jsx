import Head from 'next/head'
import styles from '@/styles/Home.module.css'
import { css } from 'styled-components'
import { Container } from '@/components/Container'
import { CloseBtn } from '@/components/Button'
import Link from 'next/link'
import { useEffect, useState } from 'react'
import auth, { c_user } from './api/auth'
import { dongle, heyComic } from '@/components/Font'
import texture1 from '../public/Img/bg_texture1.png'
import { PictureFlex } from '@/components/Image'
import { collection, deleteDoc, doc, getCountFromServer, getDoc, getDocs, onSnapshot, query, setDoc, updateDoc, where } from 'firebase/firestore'
import { User } from '@/class/User'
import { db } from '@/config/firebaseSetup'
import { Room } from '@/class/Room'
import { Button, Stack } from '@chakra-ui/react'

const style = css`
    h2{
        width: 100%;
        justify-content: center;
        display: flex;
        font-size: 3em;
        text-shadow: .75px .75px 0 #000,
        -.75px .75px 0 #000,
        .75px -.75px 0 #000,
        -.75px -.75px 0 #000,
        0px .75px 0 #000,
        0px -.75px 0 #000,
        -.75px 0px 0 #000,
        .75px 0px 0 #000,
        1.25px 1.25px 0 #000,
        -1.25px 1.25px 0 #000,
        1.25px -1.25px 0 #000,
        -1.25px -1.25px 0 #000,
        0px 1.25px 0 #000,
        0px -1.25px 0 #000,
        -1.25px 0px 0 #000,
        1.25px 0px 0 #000,
        .75px 1.25px 0 #000,
        -.75px 1.25px 0 #000,
        .75px -1.25px 0 #000,
        -.75px -1.25px 0 #000,
        1.25px .75px 0 #000,
        -1.25px .75px 0 #000,
        1.25px -.75px 0 #000,
        -1.25px -.75px 0 #000;
    }
    .row h3 {
        font-size: 2em;
        color: black;
    }
    .searchBar h3 {
        width: 35%;
    }
    .searchBar input {
        width: 65%;
        border-radius: 1em;
        background-color: white;
        padding: .25em;
        outline: none;
        border: 1px solid #E2E8F0;
        border-radius: 10px;
        box-sizing: border-box;
        position: relative;
        color: black;
        font-size:1.2em;
    }
`
export default function Friends() {
    const [inputVal, setInputVal] = useState('')
    const [userRef, setUserRef] = useState({})
    const [friends, setFriends] = useState([])
    const [request, setRequest] = useState([])
    const [state, setState] = useState('friend')
    const user = new User();
    const addFriend = async () => {
        const q = query(collection(db, 'users'), where('username', '==', inputVal))
        const qCount = await getCountFromServer(q);
        if (qCount.data().count > 0) {
            const qDoc = await getDocs(q)
            setDoc(doc(doc(db, 'users', qDoc.docs[0].id), 'request', userRef.id), {
                username: userRef.username,
                rank: userRef.rank
            })
        }
    }
    const acceptFriend = async (id) => {
        setDoc(doc(doc(db, 'users', userRef.id), 'friend', id), {
            username: userRef.username,
            rank: userRef.rank
        })
        setDoc(doc(doc(db, 'users', id), 'friend', userRef.id), {
            username: userRef.username,
            rank: userRef.rank
        })
        deleteDoc(doc(doc(db, 'users', userRef.id), 'request', id))
    }
    const reject = async (id) => {
        deleteDoc(doc(doc(db, 'users', userRef.id), 'request', id))
    }
    useEffect(() => {
        const fetchData = async (user) => {
            if (user) {
                const userDoc = await getDoc(doc(db, 'users', user.uid));
                setUserRef({ ...userDoc.data(), id: userDoc.id });
                onSnapshot(collection(doc(db, 'users', user.uid), 'friend'), friendsDocs => {
                    setFriends(friendsDocs.docs.map(fr => ({ ...fr.data(), id: fr.id })))
                });
                onSnapshot(collection(doc(db, 'users', user.uid), 'request'), requestDocs => {
                    setRequest(requestDocs.docs.map(req => ({ ...req.data(), id: req.id })))
                    // setRequest([])
                    // requestDocs.docs.forEach(req => {
                    //     setRequest(old => [...old, { ...req.data() }])
                    // })
                });

            }
            else {
                console.error('none');
            }
        }
        auth.onAuthStateChanged(async (user) => {
            console.log(user)
            if (user) {
                fetchData(user)
            }
        })
    }, [])
    return (
        <>
            <Head>
                <title>Create Next App</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" href="/favicon.ico" />
                <style>{style}</style>
            </Head>
            <main className={styles.main} style={{
                backgroundImage: `url(${texture1.src})`,
                height: '100vh',
                backgroundRepeat: 'no-repeat',
                backgroundSize: 'cover',
            }}>
                <Container width="100%" bdradius="0%" color="transparent" >
                    <Container width="80%" bdradius="20px" color="#ECD352" border="4px solid #000000" shadow="0px .75px 1.25px rgba(0, 0, 0, 0.1), 0px .75px 1.25px rgba(0, 0, 0, 0.06)" className={dongle.className}>
                        <h2 className={heyComic.className} style={{ color: 'white' }}>Friends</h2>
                        <Container width="80%" padding="0em" color="transparent" className="row">
                            <Container width="15%" height="100%" color="transparent" bdbottom={state == 'friend' ? '2px solid #E53E3E;' : 'none'} bdradius="0em">
                                <h3 style={{ cursor: 'pointer' }} onClick={() => { setState('friend') }}>Friends</h3>
                            </Container>
                            <Container width="15%" color="transparent" bdbottom={state == 'request' ? '2px solid #E53E3E;' : 'none'} bdradius="0em">
                                <h3 style={{ cursor: 'pointer' }} onClick={() => { setState('request') }}>Request</h3>
                            </Container>
                            <Container width="30%" color="transparent">
                            </Container>
                            <Container className="searchBar" width="40%" color="transparent" justify="start">
                                {/* <h4>Add Friend</h4> */}
                                <input placeholder='Username' className={dongle.className} onChange={(e) => { setInputVal(e.currentTarget.value) }}></input>
                                <button onClick={addFriend}>add Friend </button>
                            </Container>
                        </Container>
                        <Link href='/home'><CloseBtn className={dongle.className} right="-.5em">x</CloseBtn></Link>
                        <Container width="90%" height="60vh" overflowy="auto" bdradius="30px" color="white" className={dongle.className}>
                            {
                                (state == 'friend' ? friends : request)?.map((fr, index) => {
                                    console.log(fr)
                                    return (
                                        <Container key={index} mgtop="2em" className="row" width="95%" color="rgba(255, 223, 218, 0.5)" border="3px solid #FDB90B" bdradius="30px" shadow="0px 4px 4px rgba(0, 0, 0, 0.25)">
                                            <Container width="40%" color="transparent" justify="start">
                                                <Container width="4em" height="4em" color="white" bdradius="50%" border="2px solid #000000" padding="0"></Container>
                                                <Container width="40%" color="transparent" padding="0"><h3>{fr.username}</h3></Container>
                                            </Container>
                                            <Container visible={state == 'friend' ? 'visible' : 'hidden'} width="30%" color="transparent" bdradius="0px">
                                                <h3>Status : Playing</h3>
                                            </Container>
                                            <Container width="10%" color="transparent" bdradius="0px" >
                                                <Container visible={state == 'friend' ? 'visible' : 'hidden'} width="1.5em" height="1.5em" color="#F6FA45" bdradius="50%" shadow="0px 4px 4px rgba(0, 0, 0, 0.25)" padding="0"></Container>
                                            </Container>
                                            <Container width="20%" color="transparent" bdradius="0px" >
                                                <Stack direction='row' spacing={4}>
                                                    <Button visibility={state != 'friend' ? 'visible' : 'hidden'} onClick={() => { acceptFriend(fr.id) }} colorScheme='green' variant='solid'>
                                                    Accept
                                                    </Button>
                                                    <Button visibility={state != 'friend' ? 'visible' : 'hidden'} onClick={() => { reject(fr.id) }} colorScheme='red' variant='solid'>
                                                    Decline
                                                    </Button>
                                                </Stack>
                                                <Container visible={state == 'friend' ? 'visible' : 'hidden'} width="2.5em" height="2.5em" color="#D9D9D9" bdradius="50%" shadow="0px 4px 4px rgba(0, 0, 0, 0.25)" padding="0"><PictureFlex visible={state == 'friend' ? 'visible' : 'hidden'} src={"/Img/message.png"}></PictureFlex></Container>
                                                <Container visible={state == 'friend' ? 'visible' : 'hidden'} width="2.5em" height="2.5em" color="#D9D9D9" bdradius="50%" shadow="0px 4px 4px rgba(0, 0, 0, 0.25)" padding="0" mgleft="10%"><PictureFlex visible={state == 'friend' ? 'visible' : 'hidden'} src={"/Img/bin.png"}></PictureFlex></Container>
                                            </Container>

                                        </Container>
                                    )
                                }
                                )
                            }
                        </Container>

                    </Container>
                </Container>



            </main>
        </>
    )
}
